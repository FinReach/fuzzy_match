= loose_tight_dictionary

Match things based on string similarity (using the Pair Distance algorithm) and regular expressions.

== Quickstart

    >> d = LooseTightDictionary.new %w{seamus andy ben}
    => [...]
    >> puts d.find 'Shamus Heaney'
    => 'seamus'

== String similarity matching

loose_tight_dictionary uses the Pair Distance algorithm as implemented by the amatch[http://flori.github.com/amatch/] library. Thanks Flori!

== Regular expressions

You can improve the default matchings with regular expressions.

* Emphasize important words using blockings and tighteners
* Filter out stop words with tighteners
* Prevent impossible matches with blockings and identities

=== Blockings

Setting a blocking of <tt>/Airbus/</tt> ensures that strings containing "Airbus" will only be scored against to other strings containing "Airbus". A better blocking in this case would probably be <tt>/airbus/i</tt>, although this will NOT fix the case sensitivity issue mentioned below.

=== Tighteners

Adding a tightener like <tt>/(boeing).*(7\d\d)/i</tt> will cause "BOEING COMPANY 747" and "boeing747" to be scored as if they were "BOEING 747" and "boeing 747", respectively. See also "Case sensitivity" below.

=== Identities

Adding an identity like <tt>/(F)\-?(\d50)/</tt> ensures that "Ford F-150" and "Ford F-250" never match.

== Case sensitivity

You might want to add a haystack reader like <tt>lambda { |record| record.downcase }</tt> to make scoring case-insensitive.

== Examples

Try running the included example files (<tt>examples/first_name_matching.rb</tt>) and check out the tests.

== Authors

* Seamus Abshere <seamus@abshere.net>
* Ian Hough <ijhough@gmail.com>
* Andy Rossmeissl <andy@rossmeissl.net>

== Copyright

Copyright 2011 Brighter Planet, Inc.
